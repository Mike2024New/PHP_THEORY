<?php
    /*
    Важно помнить, что у каждой переменной есть своя область видимости (область действия, существования).
    Например переменная объявленная в файле модуле (не в изолированной функции) является глобально переменной, 
    то есть она будет "жива" всё время выполнения работы модуля. И к ней с помощью ключевых слов global и 
    массива $GLOBALS можно будет обратиться из изолированных функций находящихся в этом модуле.
    А вот переменная которая находится внутри функции (объявленная внутри этой самой функциии), уже получается
    локальной переменной, функция закончила свое действие переменная уничтожена, если она не была передана
    куда либо в другие функции (то есть не имеет другие ссылки в памяти).
    Также можно сохранить жизнь локальной переменной внутри функции используя ключевое слово static
    */


    // ex1(); // понятие изолированной области видимости, переменная объявленная в функции существует только в этой функции
    // ex2(); // переменную можно пробросить и в другие функции (области видимости) передав на неё ссылку ячейки памяти
    // ex3(); // статические переменные, переменные которые сохраняют свое значение и переиспользуются в функциях при каждом последующем вызове
    // ex3_1(); // дополнение к примеру 3 - как бы выглядела реализация замыкания без static (повторение темы из lesson15.php)
    $global_var_a = 1000; // переменная должна быть объявлена до вызова функции! Иначе она не отображается
    $global_var_b = "a"; // ещё один пример глобальной переменной
    // // Глобальная переменная это переменная которая находится в высшей области видимости в модуле
    // ex4(); // глобальные переменные, ключевое слово global
    // ex5(); // изменение глобальных переменных в функции
    ex6(); // аналог nonlocal (python), способ изменить переменную лежащую выше по области видимости (не глобальную)


    // аналог nonlocal (python), способ изменить переменную лежащую выше по области видимости (не глобальную)
    function ex6(){
        // первый способ изменить переменную лежащую выше по области видимости функций
        $a = 100;
        function inner(&$num){
            $num+=5;
        }

        // второй способ изменить переменную лежащую выше по области видимости функций
        $inner2 = function () use(&$a){
            $a+=5;
        };

        inner($a);
        echo $a."<br>";

        $inner2();
        $inner2();
        echo $a."<br>";
    }

    // изменение глобальных переменных в функции
    function ex5(){
        global $global_var_a;
        $global_var_a += 1; // значение глобальной переменной можно изменять
        echo $global_var_a; // было 1000 станет 1001
        echo "<br>";

        // также переменную можно изменять через массив $GLOBALS по ключу с названием переменной
        $GLOBALS["global_var_b"] = $GLOBALS["global_var_b"]."b";
        echo $GLOBALS["global_var_b"];
    }

    // глобальные переменные, ключевое слово global
    function ex4(){
        /*
         речь идёт именно про переменные объявленные в высшей области видимости
         то есть переменные объявленные внутри функции уже не считаются глобальными
         ----------------------
         Переменную можно читать двумя способами, либо с помощью ключевого слова global объявив это 1 раз
         в начале функции, либо с помощью массива $GLOBALS
         (это встроенный массив который собирает в себя все глобальные переменные)
         */
        global $global_var_a; // 1 способ доступа к глобальной переменной используем ключевое слово global
        echo $global_var_a;
        echo "<br>";
        echo $GLOBALS["global_var_b"]; // 2 способ используем ключевое слов $GLOBALS
    }

    // дополнение к примеру 3 - как бы выглядела реализация замыкания без static (повторение темы из lesson15.php)
    function ex3_1(){
        // вот так бы пришлось заморачиваться если бы не было ключевого слова static
        $counter = 0;
        $innerEx4 = function () use(&$counter){
            echo "Функция вызвана ".$counter++." раз.<br>";
        };

        $innerEx4();
        $innerEx4();
        $innerEx4();
        $innerEx4();
        $innerEx4();
    }

    // статические переменные, переменные которые сохраняют свое значение и переиспользуются в функциях при каждом последующем вызове
    function ex3(){
        /*
        Статические переменные сохраняют значение используемое функцией, и используется повторно при последующем
        вызове функции. По сути это является замыканием, и позволяет писать кратко и лаконично
        */
        function innerEx3(){
            static $counter = 0;
            echo "Функция вызвана ".$counter++." раз.<br>";
        }

        innerEx3();
        innerEx3();
        innerEx3();
        innerEx3();
        innerEx3();
    }

    // переменную можно пробросить и в другие функции (области видимости) передав на неё ссылку ячейки памяти
    function ex2(){
        
        // из этой функции будем пробрасывать переменную в innerInnerForEx2
        function innerForEx2(){
            $a = 100; // вот локальная переменная $a которая видна только в функции innerForEx2
            innerInnerForEx2($a);
        }

        // хоть и переменная $a будет проброшена в эту функцию для innerForEx2 эта переменная уже "умерла", так как и сама функция прекратила свое действие
        function innerInnerForEx2(& $num){
            echo $num;
        }

        innerForEx2();
        
    }

    // понятие изолированной области видимости, переменная объявленная в функции существует только в этой функции
    function ex1(){
        function innerForEx1(){
            $a = 100;
        }

        /* 
        в примере выше создана переменная $a со значением 100, но эта переменная существует только внутри
        функции innerForEx1, попытка обратиться к ней за пределами функции innerForEx1 вызовет ошибку
        "Undefined variable $a in..." (если переменная с таким названием не объявлена во внешней области
        видимости).
        */
        echo $a; // этот код вызовет ошибку, так как мы не имеем доступа к локальной переменной $a объявленной внутри innerForEx1
    }