<?php
    /**
     * ЗАМЫКАНИЕ - это заморозка переменной из внешней области видимости. Это доступно только в анонимной функции.
     * Переменную можно передать в двух режимах, через копию по значению (это сделано в ex1 и ex2), тогда изменения
     * этой переменной не будут влиять на внешнюю переменную.
     * И второй способо это передать ссылку на переменную &, этот способ позволит изменять внешнюю переменную
     * что может позволить например создать счётчик (см ex3).
     * Эти два режима напоминают собой режим записи и чтения
     */

    // ex1(); // понятие замыкания, снимок переменной, как влияет изменение внешней переменной на переменную внутри функции
    // ex2(); // снимок переменной, попытка изменить переменную в функции, результат изменения не сохраняется и не влияет на внешнюю переменную
    // ex3(); // изменение глобальной переменной внутри функции возможно, для этого нужно передать & ссылку в use, что позволит редактировать внешнюю переменную и видеть её после изменений
    // ex4(); // функция замыкание редактирующая массив (добавление новых элементов), используем ссылку &


    // функция замыкание редактирующая массив (добавление новых элементов), используем ссылку &
    function ex4(){
        $arr = ["a","b","c","d"];

        $edit_arr = function ($newVal) use(&$arr){ // & говорит о том, что $arr будет изменяться в функции
            array_push($arr, $newVal);
        };

        $edit_arr("e");
        echo "<pre>";
        print_r($arr);
        echo "</pre>";
    }



    // изменение глобальной переменной внутри функции возможно, для этого нужно передать & ссылку в use, что позволит редактировать внешнюю переменную и видеть её после изменений
    function ex3(){
        $counter = 100;

        $example3 = function() use(&$counter){
            $counter+=1;
            return $counter;
        };

        echo $example3()."<br>";
        echo $example3()."<br>";
        echo $example3()."<br>";
        echo $example3()."<br>";
    }

    // снимок переменной, попытка изменить переменную в функции, результат изменения не сохраняется и не влияет на внешнюю переменную
    function ex2(){
        /* в этом примере показано, что изменение переданной в функцию глобальной переменной, ни как
        не повлияет на внешнюю переменную, а также результат изменения переменной не сохранится в самой
        функции. Функция все время будет сбрасывать переданную в неё через use переменную к исходному 
        значению */

        $a = 100;

        $example2 = function() use($a){
            // не смотря на изменение в строке ниже, это изменение не будет сохраняться в функции
            $a+=1; // это изменение ни как не затронет внешнюю переменную a
            return $a; 
        };

        echo $example2()."<br>"; // 101,
        echo $example2()."<br>"; // 101,
        echo $a;

    }

    // понятие замыкания, снимок переменной, как влияет изменение внешней переменной на переменную внутри функции
    function ex1(){
        /* ЗАМЫКАНИЕ - по сути замыкание даёт возможность сделать "снимок" окружения на момент его 
        инициализации, вот есть некоторая переменная $num = 100, и добавим её в анонимную функцию
        при помощи ключевого слова use, все теперь $num со значением 100 будет храниться в функции.

        ВАЖНО! замыкание поддерживают только анонимные функции.
        */
        $num = 100;

        $example1 = function () use($num){ // при помощи ключевого слова use замораживаем внешнюю переменную в анонимной функции
            return $num;
        };

        echo $example1()."<br>"; // выведется 100
        // ниже изменяем внешнюю переменную $num, но это ни как не затрагивает переменную $num внутри анонимной фукнции которая живет в $example
        $num+=50;
        echo $example1(); // переменная $num внутри функции так и осталась равной 100, не смотря на то, что внешняя переменная теперь 150
    }