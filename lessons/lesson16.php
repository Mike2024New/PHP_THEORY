<?php
    // ex1(); // пример простейшего декоратора обёртки функции.
    ex2(); // практический пример декоратора, подключение проверки входных данных к функции

    // практический пример декоратора, подключение проверки входных данных к функции
    function ex2(){
        /*
        В этом примере подключена функция декоратор которая выносит проверку в отдельный блок, что может 
        быть очень удобно для декомпозиции кода.
        Интересно, что декоратор ниже универсальный и может быть применен для различных функций
        */
        function check_arguments(callable $func):callable{
            return function (...$args) use($func){
                // проверка входных аргументов
                foreach($args as $arg){
                    // если проверку не прошли то функция немедленно прерывается возвращая null
                    if(!(is_integer($arg)) and !(is_float($arg)) ){
                        echo "Ошибка, в функцию принимаются только типы int и float";
                        return null;
                    }
                }
                // завершение проверки входных аргументов
                $res = $func(...$args);
                return $res;
            };
        }

        $summ = function(...$args){
            $result = 0;
            foreach ($args as $num){
                $result += $num;
            }
            return $result;
        };

        $summSafe = check_arguments($summ);
        echo $summSafe(2, 10, 4.2);

    }

    function ex1(){
        /*
         В php также есть возможность использовать функции обёртки. Это такая ситуация когда некая функция
         принимает на вход другую функцию (callback функцию) и выполняет её, но перед и после выполнения
         можно дописывать скрипты расширяя тем самым функцию не меняя исходный код.
         Условно говоря функция будет выполнена но через специальный запуск
         */

        // функция декоратор расширитель логики декорируемой функции
        function decorator(callable $func){
            $counter = 0;
            return function() use($func,&$counter){
                echo "функция была выполнена ".$counter++." раз<br>";
                echo "действие перед выполнением функции...<br>";
                $res = $func(); // исполнение декорируемой функции
                echo "действие после выполнения функции...<br>";
                return $res;
            };
        }

        // декорируемая функция (она работает и так, но её можно расширить, не меняя её код)
        $func = function (){
            echo "<h4>основная функция выполняется</h4>";
            return 123;
        };

        $decoratedFunc = decorator($func);
        $decoratedFunc();
        $decoratedFunc();
        $res = $decoratedFunc();
        echo "$res"; // декорируемая функция может возвращать значения
    };