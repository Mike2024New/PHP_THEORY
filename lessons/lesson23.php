<?php
    // ex1(); // получение типа переменной gettype(), возвращает строку с названием типа переменной
    // ex2(); // первый способ проверки, используем gettype и явное строковое наименование типа переменной (гарантирует строгое сравнение)
    // ex3(); // явная проверка типа переменной с помощью встроенных функций is_integer, is_string, is_array и так далее...
    // ex4(); // установка типа переменной settype (явное преобразование переменной)
    // ex5(); // ещё один способ преобразования типов (явные преобразования типов переменной)
    ex6(); // php автоматически неявно может преобразовывать типы (например нестрогое равенство)

    // php автоматически неявно может преобразовывать типы (например нестрогое равенство)
    function ex6(){
        $a = 100;
        $b = "100";
        echo '$a равно $b => '.($a == $b)."<br>"; // выдаст true
        /*
        Это произошло потому, что под капотом php неявно преобразовал один из сравниваемых элементов
        в тип элемента в сравнение с которым он вступает, например на вход поданы 100 и "100", php
        взял и преобразовал "100" в 100 то есть в integer, все значения равны.
        Это и есть то самое автоматическое преобразование типов.
        Фактически делая нестрогое сравнение (== или !=) php получает разрешение на неявное преобразование
        типов.
        А строгое сравнение запрещает преобразовывать типы, и сравнение вида "100" и 100, будет уже
        ложью так как типы разные, хоть и значение одинаково.
        */
    }

    // ещё один способ преобразования типов (явные преобразования типов переменной)
    function ex5(){
        // из числа можно сделать булево значение
        $a = 0;
        $a = (boolean)$a;
        var_dump($a);
        echo "<br>";

        // из булева значения можно сделать строку
        $b = true;
        $b = (string)$b;
        var_dump($b);
        // а false бы при преобразовании выдал просто пустую строку
    }

    // установка типа переменной settype (явное преобразование переменной)
    function ex4(){
        $a = 100;
        echo gettype($a)."<br>"; // сейчас переменная integer
        settype($a, "string"); // устанавливаем тип переменной явным образом
        echo gettype($a)."<br>"; // теперь переменная string
        echo "<br><br>";

        // преобразуем double в integer, с отсечением дробной части
        $b = 40.12;
        echo gettype($b)."<br>"; // сейчас переменная integer
        settype($b, "integer");
        echo $b."<br>"; // дробная часть в таком случае будет просто отсечена
        echo gettype($b)."<br>"; // сейчас переменная integer
    }


    // явная проверка типа переменной с помощью встроенных функций is_int, is_string, is_array и так далее...
    function ex3(){
        /*
        is_int -> проверка, что переменная является числом
        is_string -> проверка, что переменная является строкой
        is_float -> проверка, что переменная является дробным числом float
        is_numeric -> проверка, что переменная является целым действительным числом или строковым представлением числа
        is_bool -> проверка, что переменная является  булевым значением
        is_scalar -> проверка, что переменная является простым типом (строка, число, логическое значение)
        is_null -> проверка, что переменная является пустышкой null
        is_array -> проверка, что переменная является массивом
        is_object -> проверка, что переменная объектом (это будет понятно дальше после изучения объектов)
        */

        $a = 100;
        $b = "200";
        $c = null;
        $d = "200";
        $e = true;
        $f = "100"; // при is_numeric это определится как число

        echo 'Переменная $a является числом => '.(is_int($a))."<br>";
        echo 'Переменная $b является строкой => '.(is_string($b))."<br>";
        echo 'Переменная $c является пустышкой null => '.(is_null($c))."<br>";
        echo 'Переменная $d является скаляром (простым типом) => '.(is_scalar($d))."<br>";
        echo 'Переменная $e является булевым значением => '.(is_bool($e))."<br>";
        echo 'Переменная $f является целым числом или строковым числом => '.(is_numeric($f))."<br>";
    }


    // первый способ проверки, используем gettype и явное строковое наименование типа переменной (гарантирует строгое сравнение)
    function ex2(){
        $a = 100;
        $b = "100";
        echo 'Переменная $a является integer =>'.(gettype($a)=="integer")."<br>";
        echo 'Переменная $b является integer =>'.(gettype($b)=="integer")."<br>";
    }

    // получение типа переменной gettype(), возвращает строку с названием типа переменной
    function ex1(){
        $a = 100;
        $b = [1,2,3,4];
        $c = true;
        echo 'тип переменной $a => '.gettype($a)."<br>";
        echo 'тип переменной $b => '.gettype($b)."<br>";
        echo 'тип переменной $c => '.gettype($c)."<br>";
    }