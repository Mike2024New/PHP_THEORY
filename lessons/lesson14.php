<?php
    // ex1(); // анонимная функция, не имеет своего имени, живет в переменной или может быть передана как callback функция
    // ex2(); // анонимная функция также может возвращать аргументы return
    // ex3(); // передача анонимной функции в другую функцию в качестве параметра (callback функция)
    // ex4(); // ещё один пример с callback функцией | реализация расширяемой функции, которая работает как сама по себе, так и с опциями
    // ex5(); // вспомним тему массивов из "lessons/lesson10.php", там тоже были callback функции, например: array_filter() принимает функцию фильтрацию массива, это и есть наглядный пример callback функции
    ex6();

    // и ещё один пример
    function ex6(){
        function filterWords($wordsArr,$condition){
            $arr = [];
            foreach($wordsArr as $word){
                if($condition($word)) array_push($arr,$word); // условие прошло, добавляем элемент в массив        
            }
            return $arr;
        }

        // функция фильтрации по длине слова
        $lenWord = function($word){return strlen($word)>3;};

        // функция фильтрации по первой букве
        $isFirstLitterWord = function($word){return $word[0]==="t";};

        echo "<pre>";
        // вызываем функцию filterWords с передачей в неё callback функций
        print_r(filterWords(["test","txt","proga","words","ev"], $lenWord));
        print_r(filterWords(["test","txt","proga","words","ev"], $isFirstLitterWord));
        echo "</pre>";
    }

    // вспомним тему массивов из "lessons/lesson10.php", там тоже были callback функции, например: array_filter() принимает функцию фильтрацию массива, это и есть наглядный пример callback функции
    function ex5(){
        /** Один из примеров callback функций которые могут использовать встроенные в php функции
         * функция array_filter
         */

        // функция определяет чётное число или нет
        function even($num){
            return $num % 2 ==0;
        }

        $arr = [0,1,2,3,4,5,6,7,8]; 
        echo "<pre>";
        print_r(
            array_filter($arr, 'even') // указываем функцию even в качестве callback функции (функции задающей правила фильтрации)
        );
        echo "</pre>";
    }

    // ещё один пример с callback функцией | реализация расширяемой функции, которая работает как сама по себе, так и с опциями
    function ex4(){
        /* 
        пример расширяемой функции: есть функция которая по умолчанию суммирует переданный в неё массив чисел
        но также эта функция имеет возможность сделать некие действия с результатом, например возвести результат в квадрат
        */

        function sumAction($func=null,...$numbers){
            $result = 0;
            foreach($numbers as $num){
                $result += $num;
            }
            if ($func){
                $result = $func($result);
            }
            return $result;
        }

        // 1. работа функции по умолчанию, обязательно нужно поставить null заглушку, если не передаем callback функцию
        $sum = sumAction(null,...[1,2,3,4,5,6]);
        echo "Сумма чисел (сценарий функции без опций): $sum<br><br>";

        /*  2. допустим по каким то причинам нужно результат возвести в квадрат
        тогда нужно передать эту самую функцию которая и будет возвращать квадрат
        а после неё уже аргументы */
        $square = sumAction(function ($number){
            return $number * $number;
        }, ...[2,2]);
        echo "Сумма чисел (сценарий расширенной функции, получаем квадрат функции): $square<br><br>";

        /* 3. функция расширена, эта часть функции будет возвращать сумму умноженную на переданное число
        */
        $res = sumAction(function ($number, $res=2){
            return $number * $res;
        }, ...[2,2]);
        echo "Сумма чисел умноженная (сценарий расширенной функции): $res<br><br>";
    }

    // передача анонимной функции в другую функцию в качестве параметра (callback функция)
    function ex3(){
        // функция test принимает callback функцию которую исполняет внутри себя
        function test($func){
            $func();
        }

        // вызываем функцию test с переданной в неё функцией прямо в передаваемых аргументах определяем функцию
        test(function(){
            echo "выполняется переданная функция...";
        });

    }

    // анонимная функция также может возвращать аргументы return
    function ex2(){
        $sum = function($a, $b){
            return $a+$b; // функция в себе выполняет некий код и возвращает результат
        };

        echo $sum(2, 3)."<br>";
        echo $sum(a:1, b:2)."<br>";
    }

    // анонимная функция, не имеет своего имени, живет в переменной или может быть передана как callback функция
    function ex1(){
        // определение анонимной функции и запись её в переменную
        $func = function($msg){
            echo "$msg<br>";
        };

        $func("test msg1"); // вызов анонимной функции с одним значением
        $func("test msg2"); // вызов анонимной функции со следующим значением
        // по сути все выглядит точно также как и в работе с обычными функциями кроме того, что фукнция записана в переменную
    }

    