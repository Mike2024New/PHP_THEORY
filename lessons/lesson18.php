<?php
    /*
    Генератор это ленивая коллекция данных, то есть генератор не выдаёт все значения сразу а какбы хранит
    в себе значение курсора на следующий запрос (под капотом используются теже самые замыкания? с ссылкой &)
    Преимущество генератора в том, что он выдаёт данные порционно, то есть в моменте обрабатывается одна порция данных
    к примеру берем из базы на 100000000000 номеров, только 100 номеров, проверяем их (делаем с ними какие то действия),
    за тем переключаемся на следующие 100 номеров. И преимущество здесь в том, что в памяти хранится только
    100 номеров (и ссылка на следующий номер 101 и смещение то есть по простому говоря offset и limit).
    А вот если бы в память выгружалось сразу 100000000000 номеров то это могло бы приводить к зависанию системы.
    
    yield from позволяет возвращать распакованные массивы, но он работает именно с итерируемыми коллекциями
    */
    // ex1(); // пример простейшего генератора
    // ex2(); // offset, управление размером получаемых из генератора данных
    ex3(); // использование нескольких ключевых слов yield и конструкции from

    // использование нескольких ключевых слов yield и конструкции from
    function ex3(){

        function generateNumbers(){
            // если присутствует несколько инструкций yeld, то вернутся все
            yield 1;
            yield from [2, 3, 4]; // с помощью from можно выдавать распакованные массивы
            yield 5;
        }
        
        foreach(generateNumbers() as $number){
            echo $number; // 12345
        }

    }

    // offset, управление размером получаемых из генератора данных
    function ex2(){
        function gen($n, $offset){
            for($i=0; $i<=$n;$i+=$offset){
                yield from $i;
            }
        }

        foreach(gen(n: 100, offset: 10) as $val){
            echo $val."<br>";
        }

    }

    // пример простейшего генератора
    function ex1(){
        function generator($n=10){
            // по сути здесь обозревается массив от 0 до n элементов, но за счёт слова yeld данные выдаются порционно по 1
            for($i=0;$i<=$n;$i++){
                yield $i;
            }
        }

        foreach(generator(n:5) as $index => $number){
            echo "$index -> $number<br>"; // в единицу времени обрабатывается только 1 значение
        }
    }