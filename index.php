<!--
ЭТО ГЛАВНЫЙ ФАЙЛ ОГЛАВЛЕНИЕ, ВСЕ ССЫЛКИ НА УРОКИ ХРАНЯТСЯ В ЭТОМ ФАЙЛЕ, 
А ТАКЖЕ В ЭТОМ ФАЙЛЕ ХРАНИТСЯ КРАТКОЕ ОПИСАНИЕ РАССМАТРИВАЕМЫХ ТЕМ
Конспект сделан на основании источников:
https://www.php.net/docs.php
https://metanit.com/php/tutorial/
и моего креатива, а также опыта разработки на python
-->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <h1>Теория</h1>
    <?php
    // ТЕОРИЯ:
    // include_once "lessons/lesson1.php"; // типы данных
    // include_once "lessons/lesson2.php"; // дополнительная тема: тип int -> двоичная, восьмеричная и шестнадцатиричная системы
    // include_once "lessons/lesson3.php"; // арифметические операции (+ - / * % **), целочисленное деление intdiv(), декремент++, инкремент--
    // include_once "lessons/lesson4.php"; // оператор <=> (1,0,-1),операции сравнения (== === != !== > < >= <=), строгое и нестрогое сравнения
    // include_once "lessons/lesson5.php"; // логические операции &&, and, ||, or, !, xor. Ключевое отличие or от xor (если оба операнда true, то xor вернет false (в отличии от or))
    // include_once "lessons/lesson6.php"; // условные конструкции if/else if/else, неявное приведение типов, альтернативный способ записи условий через : (как в python, но с endif)
    // include_once "lessons/lesson7.php"; // тернарный оператор, условная конструкция для простых условий "условие ? если истина : если ложь", составной тернарный оператор
    // include_once "lessons/lesson8.php"; // конструкция switch..case, блок кейсов case, выход или прыжок на следующий кейс break, действие если не было верно не одно условие default, switch не проверяет типы, а только значения
    // include_once "lessons/lesson9.php"; // конструкция math альтернатива switch для простых условий, гарантирует строгую проверку то есть и типов тоже (в отличии от switch)
    // include_once "lessons/lesson10.php"; // массивы методы работы с ними основные функции / массивы, понятие индексного и ассоциативного массива. Поведение массива при удалении элементов. crud операции с массивами. print_r красивый вывод массива.
    // include_once "lessons/lesson11.php"; // циклы for и foreach  инструкции break, continue, прерывание и пропуск итераций
    // include_once "lessons/lesson12.php"; // циклы while, do while инструкции break, continue, прерывание и пропуск итераций
    // include_once "lessons/lesson13.php"; // функции, параметры функции и аргументы функции, возвращаемые из функции параметры, произвольное количество передаваемых в функцию аргументов (оператор ...)
    // include_once "lessons/lesson14.php"; // анонимные функции, это функции без имени, которые часто передаются в качестве callback функций, а также могут храниться в переменных.
    // include_once "lessons/lesson15.php"; // замыкание (замораживание переменной) поддерживаемое анонимной функцией.
    // include_once "lessons/lesson16.php"; // функция обёртка декоратор (некое подобие декораторов в python), эта функция позволяет расширять функционал функции не изменяя код исходной функции.
    // include_once "lessons/lesson17.php"; // стрелочные функции, более краткая и лаконичная запись анонимной функции, по умолчанию поддерживаются данные из внешней области функции (но не изменяются внутри), используются для простой логики.
    // include_once "lessons/lesson18.php"; // генераторы "ленивые" коллекции данных позволяющие сильно экономить память. Ключевое слово yeld.
    // include_once "lessons/lesson19.php"; // ссылки &, копирование элементов, повторение темы пройденной в замыканиях (lesson.15.php)
    // include_once "lessons/lesson20.php"; // области видимости переменных, обращение к глобальным переменным global встроенный массив $GLOBALS, реализация аналога nonlocal из python
    // include_once "lessons/lesson21.php"; // константы define создание константы видимой во всём скрипте, defined проверка существования константы, объявление констант в высшей области видимости
    // include_once "lessons/lesson22.php"; // isset - проверка того, что переменная существует и определена (ей присвоено значение), empty - проверка того, что переменная пуста то есть значения вида ("","0",0, false, []) проверка не строгая
    // include_once "lessons/lesson23.php"; // получение типа переменной gettype, проверка что переменная является конкретным типом is_integer(), is_string() и так далее. Повтор разницы между строгим и нестрогим сравнением
    // include_once "lessons/lesson24.php"; // работа с массивами продолжение lesson10


    // "черновик" для отладки некоторых функций, чтобы не "гадить" в основном коде
    include_once "lessons/helper.php"; // "черновик" для отладки некоторых функций

    /* 
    примечание: в некоторых примерах проверки входных аргументов опущены, так как акцент внимания уделяется 
    рассматриваемому материалу, и чтобы функция выглядела проще.
    Но в реальном коде и практических задачах, проверки типов и данных обязательно должны присутствовать!
    */

    // ПРАКТИКА (ЗАКРЕПЛЕНИЕ ТЕОРИИ УПРАЖНЕНИЯ):
    // include_once "practic/pract1.php";
    include_once "practic/pract2.php"; // практика по урокам lesson1 - lesson24

    // здесь будут приложения для закрепления навыков по php и некоторые из приложений будут иметь практическую направленность
    // include_once "apps/app1.php"; // небольшое приложение для расчёта мебели (повтор тем с lesson1-lesson24), практика закрепление материала
    ?>
</body>
</html>