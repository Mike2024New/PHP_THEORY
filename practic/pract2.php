<?php
    include_once __DIR__."/../utilits/array.php";
    /*
    выявленные темы которые нужно повторить отдельно:
    mb_str - функции для корректной работы с кириллицей
    array_filter - передача callback функций в массив
    unsort - сортировка на основании пользовательской функции
    strcasecmp - сравнение строк без учёта регистра
    mb_substr - работа с кириллицей
    Изучить строки их сравнения и как корректно работать с кириллицей (mb_)
    */


    // практика, попросил ИИ сгенерировать мне задачи на базе моего конспекта (lesson1 - lesson2), решаю их здесь
    
    // ВАЖНО! ЧАСТО ДАННЫЕ МОГУТ БЫТЬ ПОЛУЧЕНЫ ИЗ ФОРМЫ, А ЭТО СТРОКА, ПОЭТОМУ ИСПОЛЬЗУЕМ is_numeric
    // pr1(); // пользователь вводит три числа, вывести на экран максимальное из них, минимальное, среднее арифметическое
    // pr2(); // проверка числа на свойства - пользователь вводит целое число, определить является ли оно чётным, делится ли на 3 без остатка, находится ли оно в диапазоне от 100 до 999 включительно
    // pr3(); // работа с массивами и циклами, найти сумму всех элементов, найти макс и минимальн элемент, сформировать новый массив из четн чисел исходного, посчитать сколько раз встречается каждое число
    // ВАЖНО! В 4 ПРИМЕРЕ ДЛЯ ТОГО ЧТОБЫ КОРРЕКТНО СРАВНИВАТЬ КИРИЛЛИЦУ, НУЖНО ИСПОЛЬЗОВАТЬ ФУНКЦИИ С ПРИСТАВКОЙ mb_ (так как сравнение ведется по байтам)
    // pr4(); // сгенерировать массив из 20 случайных строк, отфильтровать только те строки длина котор больше 5 симв, отсортировать полученный массив по алфавиту без учета регистра
    pr5(); // ассоциативный массив найти в массиве товар с самой высокой ценой, посчитать стоимость всех товаров, сформировать массив в котором стоимости увеличены на 10%

    // ассоциативный массив найти в массиве товар с самой высокой ценой, посчитать стоимость всех товаров, сформировать массив в котором стоимости увеличены на 10%
    function pr5(){
        // массив с данными
        $products = [
            "Ноутбук" => 69999,
            "Смартфон" => 35999,
            "Планшет" => 24999,
            "Монитор" => 17999,
            "Клавиатура" => 2999,
            "Мышь" => 1999,
            "Принтер" => 8499,
            "Внешний диск" => 6499,
            "Наушники" => 3999,
            "Колонка" => 2999
        ];

        // решение
    }

    // сгенерировать массив из 20 случайных строк, Отфильтровать только те строки длина котор больше 5 симв, отсортировать полученный массив по алфавиту без учета регистра
    function pr4(){
        $text = "сгенерировать Массив из 20 случайных строк, Отфильтровать Только те Строки длина котор больше 5 симв и котор начинаются на гласную букву, отсортировать полученный массив по алфавиту без учета регистра";

        // 1. сгенерируем массив случайных 20 слов
        function generateListRandomWords($text, $limit){
            // 0 проверки
            if(!(is_string($text))){
                throw new Exception("На вход принимается только string (текст)");
            }

            if(!(is_integer($limit))){
                throw new Exception("Количество слов должно быть целым числом а не $limit");
            }

            if($limit<=0){
                throw new Exception("Число слов должно быть целым числом больше 0 а не $limit");
            }

            if(strlen($text)===0){
                throw new Exception("Строка не должна быть пустой");
            }

            $arr = explode(" ",$text); // разбили строку и сохраняем её в $arr
            $outArr = []; // выходной массив
            for($i=0; $i<=$limit; $i++){
                array_push($outArr, $arr[random_int(0, count($arr)-1)]); // берем случайное значение из массива $arr
            }
            return $outArr;
        }
        
        function filterArray($arr){
            if(!(is_array($arr))){
                throw new Exception("На вход принимается только массив а не $arr");
            }

            function funcFilter($word){
                $vowels = ['а','е','ё','и','о','у','ы','э','ю','я','a','e','i','o','u','y'];
                echo $word."<br>";
                return (mb_strlen($word, 'UTF-8') > 5) && in_array(mb_substr($word, 0, 1, 'UTF-8'), $vowels);
            }

            // фильтрация
            $arr = array_filter($arr, 'funcFilter', ARRAY_FILTER_USE_BOTH);

            // сортировка
            usort($arr, function ($a, $b){
                return strcmp(mb_strtolower($a), mb_strtolower($b)); // с функцией strcmp поработать отдельно (при прохождении строк и их методов)
            });
            return $arr;
        }
        
        $arr = generateListRandomWords(text : $text, limit : 20);
        $res = filterArray($arr);
        showArray($res);
    
    }


    // работа с массивами и циклами, найти сумму всех элементов, найти макс и минимальн элемент, сформировать новый массив из четн чисел исходного, посчитать сколько раз встречается каждое число
    function pr3(){
        function analisArray($arr){
            /*
            В основе решения выдаваемый массив с информацией о массиве
            И цикл foreach по исходному массиву, функции min, sum, max,array_count_values не используются 
            так как они создадут дополнительные итерации что может замедлить время работы функции при больших 
            массивах данных (так как все они под капотом содержат тот же самый перебор, а у нас уже есть foreach
            поэтому разумнее производить операции в нём)
            */

            // проверяем что это именно массив
            if(!(is_array($arr))){
                throw new Exception("На вход принимаются только массивы, а не $arr");
            }

            // проверяем что массив не пустой
            if(count($arr)===0){
                throw new Exception("На вход подан пустой массив");
            }

            // формируем ответ
            $result = [
                "original_arr" => $arr,
                "sum" => 0,
                "even_numbers" => [],
                "min" => (int) $arr[0],
                "max" => (int) $arr[0],
                "count_el_in_arr" => [],
            ];

            for($i=0;$i<count($arr);$i++){
                // проверка, что элемент корректен по типам
                if (!(is_int($arr[$i]) || (is_numeric($arr[$i]) && (int)$arr[$i] == $arr[$i]))){
                    // проверка работает на принципе (после ||) 3.0 == 3, то есть по нестрогому сравнению 3.0 это и есть 3
                    throw new Exception("На вход принимается только массив целых чисел. Элемент $arr[$i] не корректен");
                }

                // перевод элемента из строки если требуется
                if (is_numeric($arr[$i])) $arr[$i] = (int) $arr[$i]; 

                // число четное? добавляем его в массив четных
                if ($arr[$i] % 2 === 0) array_push($result["even_numbers"], $arr[$i]); 

                // вычисление минимальных и максимальных значений
                if($arr[$i]<$result["min"]) $result["min"] = $arr[$i];
                if($arr[$i]>$result["max"]) $result["max"] = $arr[$i];

                // сумма увеличивается
                $result["sum"] += $arr[$i];

                // механизм подсчёта значений в массиве
                $key = (string)$arr[$i]; // ключ для удобства приведен к строке (вообще рекомендуется ключи ассоциативные делать в виде строк)
                if (!(array_key_exists($key, $result["count_el_in_arr"]))){
                    $result["count_el_in_arr"][$key] = 0; // значение ещё не встречалось, инициализируем ключ со значением 0
                }
                $result["count_el_in_arr"][$key]+=1; // наращиваем счётчик на каждый встречный элемент этого ключа
            }

            return $result;
        }



        function generateRandomArrayInt($start, $end, $length){
            // базовый блок проверки
            foreach([$start, $end, $length] as $val){
                if(!(is_int($val) || is_numeric($val))){
                    throw new Exception ("На вход принимаются только числа а не $val");
                }
            }

            $arr = [];
            for($i=0;$i<$length;$i++){
                $arr[] = random_int($start, $end);
            }
            return $arr;
        }


        // 1. Генерируем массив из 10 случайных чисел от 1 до 100
        $arr = generateRandomArrayInt(start : "1", end : 100, length : 10);
        // 2. Получаем аналитику о массиве
        $res = analisArray($arr);
        // 3. Выводим информацию о массиве
        showArray(arr: $res, header: "результат");
    }

    // проверка числа на свойства - пользователь вводит целое число, определить является ли оно чётным, делится ли на 3 без остатка, находится ли оно в диапазоне от 100 до 999 включительно
    function pr2(){
        function getPropertyNumber($num){
            // 0. проверка входных данных
            if(!(is_int($num) || is_numeric($num))){
                throw new Exception("Число должно быть целым а не $num");
            }

            if(is_numeric($num)){
                $num = (integer)$num;
            }

            $info = [
                "Число $num является чётным? " => $num % 2 == 0 ? "да" : "нет",
                "Число $num делится на 3 без остатка?" => $num % 3 == 0 ? "да" : "нет",
                "Число $num находится в диапазоне от 100 до 999 включительно? " => 100 <$num && $num <= 999? "да" : "нет",
            ];

            return $info;
        }

        $res = getPropertyNumber(num:"99");
        foreach($res as $question => $answer){
            echo "$question : $answer <br>";
        }
    }

    // пользователь вводит три числа, вывести на экран максимальное из них, минимальное, среднее арифметическое
    function pr1(){
        function numbersAnalis(int | float $a,int | float $b, int | float $c){
            // 0. Собираем числа в массив:
            $numbers = [$a, $b, $c];
            // 1. Проверка входных данных:
            foreach ($numbers as $num){
                if (!(is_int($num) || is_float($num) || is_numeric($num))){
                    throw new Exception("Числа на входе должны иметь тип либо int, либо float, либо строка в виде числа, а не $num");
                }
                if (is_numeric($num)){ // если число получено из формы, то это строка, обеспечить float
                    $num = (float) $num;
                }
            }

            // 2. Вывод информации о числах в массиве:
            echo "На вход принят массив: ";
            echo "<pre>";
            print_r($numbers);
            echo "</pre>";
            echo "Максимальное число ".max($numbers)."<br>";
            echo "Минимальное число ".min($numbers)."<br>";
            echo "Среднее арифметическое ".array_sum($numbers)/3;
        }

        numbersAnalis(a: 10, b: "5", c: 3);
    }